Компонентный фреймворк

Структура:

Фреймворк
  Проект
    Библиотека 1
    Библиотека 2

=============================

Развитие PHP: 

2004 - название Hypertext Preprocessor 
2005 - PHP 5.0 + OOP
2012 - Composer 

Суммарно: 

- ООП
- Социальный кодинг GitHub
- Пакетный менеджер Composer

==============================

Начало создания структуры - 28:00

Создаем папку public и размещаем в нее файл index.php 

==============================

Перечень суперглобальных массивов (для применения):

$_SERVER, $_GET, $_POST, $_FILES, $_COOKIE, $_SESSION

==============================

Организация автозагрузки 54:30

01:02 - Автозагрузка через Composer установлена

=========================================================

Организация тестирования

Команда через терминал:
composer require --dev phpunit/phpunit

После загрузки, в коне создаем папку 'tests/Framework/Http'
 и файлы  phpunit.xml / phpunit.xml.dist

Перезапускаем Composer командой composer install 
чтобы обглвилась папка vendor
и появился раздел /phpunit

=====================================

Описание тестирования и команды сервера: 01:07 - 01:25
Перенос в архив

=====================================

Просмотреть повторно с 01:30  ( Пока не понятно)

=====================================

Обсуждение тестирования с 01:38 

=====================================

PSR-7

composer require psr/http-message 
Внимание: При этом пакете не устанавливается laminas/laminas-diactoros

composer require laminas/laminas-diactoros

=====================================

10.04.2023  
Зафисировано текущее состояние в виде открытия нового репозитория

=====================================

Подключение laminas
Time: 02:15

Нужно найти

use Laminas\HttpHandlerRunner\Emitter\SapiEmitter;

Для применения в 

$emitter = new SapiEmitter();
$emitter->emit($response);

https://docs.laminas.dev/laminas-httphandlerrunner/emitters/

======================================

Раздел 2

00:35

Просмотреть заново с 00:28 
Решить вопрос с адресами от public

======================================

00:42

Web-MVC / GRASP

GRASP принципы
https://bool.dev/blog/detail/grasp-printsipy

======================================

New Structure

$routes = new RouteCollection();

$router = new Router($collection);

$result = $router->match($request);

========================================

$routes->get('blog_show', '/blog/{id:\d+}', function ($request) { ... });

или 

$routes->get('blog_show', '/blog/{id}', function ($request) { ... }, ['id' => '\d+']);

или 

$routes->get('blog_show', '/blog[/{page}]', function ($request) { ... }, [
    'tokens' => ['page' => '\d+'],
    'default' => ['page' => 1]
]);

=======================================
01:12  Начало реализации

Сначала создаем тест, далее на его основе роутер

Написание тестирования
Остановка на 01:13:30

===================================

Продолжение с 01:17

Создаем элементы роутера

Приостановлено в 01:25 

===================================

01:28 Заготовки для маршрутизатора готовы

===================================

01:40 Завершение роутеров

============ TESTING ==================

There was 1 PHPUnit warning:

Your XML configuration validates against a deprecated schema. Migrate your XML configuration using "--migrate-configuration"!

WARNINGS!
Tests: 6, Assertions: 11, Warnings: 1.
Script phpunit --colors=always handling the test event returned with error code 1

========= Перевод

Было получено 1 предупреждение PHPUnit:

Ваша конфигурация XML проверяется на соответствие устаревшей схеме. Перенесите свою XML-конфигурацию с помощью "--migrate-configuration"!

ПРЕДУПРЕЖДЕНИЯ!
Тестов: 6, Утверждений: 11, предупреждений: 1.
Скрипт phpunit --colors=всегда обрабатывает тестовое событие, возвращаемое с кодом ошибки 1

========================================

Завершение в 02:05

Продолжить с 01:55
